{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## –ó–∞–¥–∞–Ω–∏–µ 1\n",
        "import numpy as np\n",
        "\n",
        "def uniform_intervals(a, b, n):\n",
        "\n",
        "1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤.\n",
        "   \n",
        "    pass"
      ],
      "metadata": {
        "id": "5M_j-E4mrcUV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def uniform_intervals(a, b, n):\n",
        "    return np.linspace(a, b, n)\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test1():\n",
        "    assert np.allclose(uniform_intervals(-1.2, 2.4, 7), np.array([-1.2, -0.6, 0.0, 0.6, 1.2, 1.8, 2.4])), \"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!\"\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test1()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KMxXCNtlroB6",
        "outputId": "5c591f0b-3719-4381-e00e-7bc980d88936"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# –ó–∞–¥–∞–Ω–∏–µ 2\n",
        "def cyclic123_array(n):\n",
        "\n",
        "2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã  3ùëõ , –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1....\n",
        "    pass"
      ],
      "metadata": {
        "id": "Fg1N8dGYvzFK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def cyclic123_array(n):\n",
        "    return np.tile([1, 2, 3], n)\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test2():\n",
        "    assert np.allclose(cyclic123_array(4), np.array([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test2()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d-FQsyhSw3bG",
        "outputId": "349398a0-6f8b-4b3d-9e32-4ba9810c050c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## –ó–∞–¥–∞–Ω–∏–µ 3\n",
        "def first_n_odd_number(n):\n",
        "\n",
        "3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª\n",
        "   \n",
        "    pass\n"
      ],
      "metadata": {
        "id": "TbSWmhamxJXY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def first_n_odd_number(n):\n",
        "    return np.arange(1, 2*n, 2)\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test3():\n",
        "    assert np.allclose(first_n_odd_number(3), np.array([1, 3, 5]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test3()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gGi3Z1s7xcnh",
        "outputId": "496c0aa8-4386-4481-d3c5-047a6e169df4"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# –ó–∞–¥–∞–Ω–∏–µ 4\n",
        "def zeros_array_with_border(n):\n",
        "   \n",
        "4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å \"—Ä–∞–º–∫–æ–π\" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º.\"\"\"\n",
        "   \n",
        "    pass"
      ],
      "metadata": {
        "id": "cInsR8DMx_NN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def zeros_array_with_border(n):\n",
        "    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n\n",
        "    array = np.zeros((n, n))\n",
        "\n",
        "    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–º–∫—É –∏–∑ –µ–¥–∏–Ω–∏—Ü\n",
        "    array[0, :] = 1  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞\n",
        "    array[-1, :] = 1  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞\n",
        "    array[:, 0] = 1  # –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞\n",
        "    array[:, -1] = 1  # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞\n",
        "\n",
        "    return array\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test4():\n",
        "    assert np.allclose(zeros_array_with_border(4), np.array([[1., 1., 1., 1.],\n",
        "                                                             [1., 0., 0., 1.],\n",
        "                                                             [1., 0., 0., 1.],\n",
        "                                                             [1., 1., 1., 1.]]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test4()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UuN_OJm-yMat",
        "outputId": "28346513-a5ac-49f0-c0cb-72786ae85448"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## –ó–∞–¥–∞–Ω–∏–µ 5\n",
        "def chess_board(n):\n",
        "5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü\n",
        "\n",
        "    pass"
      ],
      "metadata": {
        "id": "xfr33z5Uywc0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def chess_board(n):\n",
        "    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤, –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã (i + j) % 2\n",
        "    board = np.indices((n, n)).sum(axis=0) % 2\n",
        "    return board\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test5():\n",
        "    assert np.allclose(chess_board(3), np.array([[0., 1., 0.],\n",
        "                                                 [1., 0., 1.],\n",
        "                                                 [0., 1., 0.]]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test5()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2B4yAony95T",
        "outputId": "924f2f49-476a-49bc-d7d3-a491296fb39d"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# –ó–∞–¥–∞–Ω–∏–µ 6\n",
        "def matrix_with_sum_index(n):\n",
        "6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ  –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó.\n",
        "\n",
        "    pass"
      ],
      "metadata": {
        "id": "BAw8Fx8Azadn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def matrix_with_sum_index(n):\n",
        "    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤\n",
        "    row_indices = np.arange(n).reshape(-1, 1)  # –°—Ç—Ä–æ–∫–∏\n",
        "    col_indices = np.arange(n)                  # –°—Ç–æ–ª–±—Ü—ã\n",
        "    # –°—É–º–º–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã\n",
        "    return row_indices + col_indices\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test6():\n",
        "    assert np.allclose(matrix_with_sum_index(3), np.array([[0, 1, 2],\n",
        "                                                             [1, 2, 3],\n",
        "                                                             [2, 3, 4]]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test6()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xmX8u5xQzj00",
        "outputId": "f854abcc-557b-472b-ad15-193165833aac"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## –ó–∞–¥–∞–Ω–∏–µ 7\n",
        "def cos_sin_as_two_rows(a, b, dx):\n",
        "7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx,  –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤.\n",
        "   \n",
        "    pass"
      ],
      "metadata": {
        "id": "sG3lXqik0E1P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def cos_sin_as_two_rows(a, b, dx):\n",
        "    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π x\n",
        "    x = np.arange(a, b, dx)\n",
        "    # –í—ã—á–∏—Å–ª—è–µ–º cos –∏ sin\n",
        "    cos_values = np.cos(x)\n",
        "    sin_values = np.sin(x)\n",
        "    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤\n",
        "    return np.vstack((cos_values, sin_values))\n",
        "\n",
        "# –ü—Ä–æ–≤–µ—Ä–∫–∞\n",
        "def test7():\n",
        "    assert np.allclose(cos_sin_as_two_rows(0, 1, 0.25),\n",
        "                       np.array([[1.        , 0.96891242, 0.87758256, 0.73168887],\n",
        "                                 [0.        , 0.24740396, 0.47942554, 0.68163876]]))\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test7()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nFyJ-nIR0U-6",
        "outputId": "89fc1233-e8ea-42a3-dce5-d91440ebc167"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### –ó–∞–¥–∞–Ω–∏–µ 8\n",
        "def compute_mean_rowssum_columnssum(A):\n",
        "8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤.\n",
        "\n",
        "    pass\n"
      ],
      "metadata": {
        "id": "FZ2GHt-60vAN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def compute_mean_rowssum_columnssum(A):\n",
        "    mean = np.mean(A)  # –°—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n",
        "    rows_sum = np.sum(A, axis=1)  # –°—É–º–º–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º\n",
        "    columns_sum = np.sum(A, axis=0)  # –°—É–º–º–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º\n",
        "    return mean, rows_sum, columns_sum\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê —Ç–µ—Å—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n",
        "def test8():\n",
        "    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n",
        "    A = np.array([[0.1, 0.2, 0.3, 0.4, 0.5],\n",
        "                  [0.6, 0.7, 0.8, 0.9, 1.0],\n",
        "                  [1.1, 1.2, 1.3, 1.4, 1.5]])\n",
        "\n",
        "    mean, rows_sum, columns_sum = compute_mean_rowssum_columnssum(A)\n",
        "\n",
        "    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n",
        "    expected_mean = 0.8\n",
        "    expected_rows_sum = np.array([1.5, 4.0, 6.5])\n",
        "    expected_columns_sum = np.array([1.8, 2.1, 2.4, 2.7, 3.0])\n",
        "\n",
        "    assert np.abs(mean - expected_mean) < 1e-12\n",
        "    assert np.allclose(rows_sum, expected_rows_sum)\n",
        "    assert np.allclose(columns_sum, expected_columns_sum)\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test8()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ygVOwypK07mp",
        "outputId": "495d799f-c745-42f3-c861-7e0c41ed52d7"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## –ó–∞–¥–∞–Ω–∏–µ 9\n",
        "def sort_array_by_column(A, j):\n",
        "9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.\n",
        "\n",
        "    pass"
      ],
      "metadata": {
        "id": "kP_IBSwA1rq6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def sort_array_by_column(A, j):\n",
        "    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É\n",
        "    sorted_indices = np.argsort(A[:, j])\n",
        "    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞\n",
        "    sorted_A = A[sorted_indices]\n",
        "    return sorted_A\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test9():\n",
        "    np.random.seed(42)\n",
        "    A = np.random.rand(5, 5)\n",
        "    expected_result = np.array([[0.15599452, 0.05808361, 0.86617615, 0.60111501, 0.70807258],\n",
        "                                 [0.61185289, 0.13949386, 0.29214465, 0.36636184, 0.45606998],\n",
        "                                 [0.18340451, 0.30424224, 0.52475643, 0.43194502, 0.29122914],\n",
        "                                 [0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864],\n",
        "                                 [0.02058449, 0.96990985, 0.83244264, 0.21233911, 0.18182497]])\n",
        "\n",
        "    sorted_A = sort_array_by_column(A, 1)\n",
        "\n",
        "    assert np.allclose(sorted_A, expected_result)\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test9()\n",
        "print(\"–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "itkaESBh12BX",
        "outputId": "ba4065c3-9986-43bc-d76e-934cb74e1af7"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# –ó–∞–¥–∞–Ω–∏–µ 10\n",
        "def compute_integral(a, b, f, dx, method):\n",
        "10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏:  \n",
        "    method == 'rectangular' - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞   \n",
        "    method == 'trapezoidal' - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π   \n",
        "    method == 'simpson' - –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞\n",
        "    \n",
        "    pass"
      ],
      "metadata": {
        "id": "MVnF63UY2ZFi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def compute_integral(a, b, f, dx, method):\n",
        "    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ x –æ—Ç a –¥–æ b —Å —à–∞–≥–æ–º dx\n",
        "    x = np.arange(a, b, dx)\n",
        "\n",
        "    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç b –≤–∫–ª—é—á–µ–Ω\n",
        "    if x[-1] < b:\n",
        "        x = np.append(x, b)\n",
        "\n",
        "    # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ —ç—Ç–∏—Ö —Ç–æ—á–∫–∞—Ö\n",
        "    y = f(x)\n",
        "\n",
        "    if method == 'rectangular':\n",
        "        # –ú–µ—Ç–æ–¥ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–ª–µ–≤—ã–π)\n",
        "        integral = np.sum(y[:-1] * dx)\n",
        "\n",
        "    elif method == 'trapezoidal':\n",
        "        # –ú–µ—Ç–æ–¥ —Ç—Ä–∞–ø–µ—Ü–∏–π\n",
        "        integral = np.sum((y[:-1] + y[1:]) * dx / 2)\n",
        "\n",
        "    elif method == 'simpson':\n",
        "        # –ú–µ—Ç–æ–¥ –°–∏–º–ø—Å–æ–Ω–∞\n",
        "        n = len(x) - 1  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤\n",
        "        if n < 2 or n % 2 != 0:\n",
        "            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤ –Ω–µ—á–µ—Ç–Ω–æ–µ, –¥–æ–±–∞–≤–∏–º –æ–¥–Ω—É —Ç–æ—á–∫—É\n",
        "            x = np.append(x, b + dx)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ b\n",
        "            y = f(x)  # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏\n",
        "            n = len(x) - 1  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤\n",
        "\n",
        "        integral = (dx / 3) * (y[0] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-2:2]) + y[-1])\n",
        "\n",
        "    else:\n",
        "        raise ValueError(\"–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'rectangular', 'trapezoidal' –∏–ª–∏ 'simpson'.\")\n",
        "\n",
        "    return integral\n",
        "\n",
        "# –ü–†–û–í–ï–†–ö–ê\n",
        "def test10():\n",
        "    f1 = lambda x: (x**2 + 3) / (x - 2)\n",
        "    assert np.allclose(compute_integral(3, 4, f1, 0.001, method=\"rectangular\"), 10.352030263919616, rtol=0.01)\n",
        "    assert np.allclose(compute_integral(3, 4, f1, 0.001, method=\"trapezoidal\"), 10.352030263919616, rtol=0.01)\n",
        "    assert np.allclose(compute_integral(3, 4, f1, 0.001, method=\"simpson\"), 10.352030263919616, rtol=0.001)\n",
        "\n",
        "    f2 = lambda x: np.cos(x)**3\n",
        "    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method=\"rectangular\"), 2/3, rtol=0.01)\n",
        "    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method=\"trapezoidal\"), 2/3, rtol=0.01)\n",
        "    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method=\"simpson\"), 2/3, rtol=0.001)\n",
        "\n",
        "# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞\n",
        "test10()\n",
        "print(\"–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fjdYfe8F2nCR",
        "outputId": "f5a78e6d-5bb9-4e4c-ff45-7d991a2c15ec"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n"
          ]
        }
      ]
    }
  ]
}
